from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.db.session import SessionLocal
from app.db.crud import get_or_create_user, create_task, list_tasks, mark_done

router = Router(name="tasks")

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class AddTask(StatesGroup):
    waiting_for_title = State()
    waiting_for_total = State()
    waiting_for_difficulty = State()

@router.message(Command("addtask"))
async def cmd_addtask(message: Message, state: FSMContext):
    await state.set_state(AddTask.waiting_for_title)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è:")

@router.message(AddTask.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddTask.waiting_for_total)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è?")

@router.message(AddTask.waiting_for_total)
async def process_total(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ!")
    await state.update_data(total=int(message.text))

    # –ö–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üü¢ –õ–µ–≥–∫–æ (5 –±–∞–ª—ñ–≤)", callback_data="diff_1")],
            [InlineKeyboardButton(text="üü° –°–µ—Ä–µ–¥–Ω—å–æ (10 –±–∞–ª—ñ–≤)", callback_data="diff_2")],
            [InlineKeyboardButton(text="üî¥ –í–∞–∂–∫–æ (15 –±–∞–ª—ñ–≤)", callback_data="diff_3")],
        ]
    )

    await state.set_state(AddTask.waiting_for_difficulty)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("diff_"))
async def process_difficulty(callback: CallbackQuery, state: FSMContext):
    difficulty = int(callback.data.split("_")[1])
    points_map = {1: 5, 2: 10, 3: 15}
    reward = points_map[difficulty]

    data = await state.get_data()
    title = data["title"]
    total = data["total"]

    with SessionLocal() as db:
        user = get_or_create_user(db, callback.from_user.id, callback.from_user.username)
        task = create_task(db, user.UserId, title, total, reward)

    await state.clear()
    await callback.message.edit_text(
        f"‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è #{task.TaskId}: {task.Title} √ó {task.TotalCount} "
        f"(–°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {difficulty}, +{task.RewardPoints} –±–∞–ª—ñ–≤ –∑–∞ —Ä–∞–∑)"
    )

# –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å
@router.message(Command("mytasks"))
async def cmd_mytasks(message: Message):
    with SessionLocal() as db:
        user = get_or_create_user(db, message.from_user.id, message.from_user.username)
        tasks = list_tasks(db, user.UserId)
    if not tasks:
        return await message.answer("–ó–∞–≤–¥–∞–Ω—å –ø–æ–∫–∏ –Ω–µ–º–∞—î. –î–æ–¥–∞–π —á–µ—Ä–µ–∑ /addtask")
    lines = []
    for t in tasks:
        status = "‚úÖ" if t.IsCompleted else "‚è≥"
        lines.append(f"#{t.TaskId} {status} {t.Title} ‚Äî {t.CurrentCount}/{t.TotalCount}, +{t.RewardPoints}/—Ä–∞–∑")
    await message.answer("\n".join(lines))

# –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
@router.message(Command("done"))
async def cmd_done(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /done ID")
    try:
        task_id = int(parts[1])
    except ValueError:
        return await message.answer("ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")

    with SessionLocal() as db:
        user = get_or_create_user(db, message.from_user.id, message.from_user.username)
        task, added = mark_done(db, user.UserId, task_id)
    if not task:
        return await message.answer("–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–µ.")
    suffix = " (–∑–∞–≤–µ—Ä—à–µ–Ω–æ!)" if task.IsCompleted else ""
    await message.answer(f"–ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è '{task.Title}', +{added} –±–∞–ª—ñ–≤{suffix}.")
